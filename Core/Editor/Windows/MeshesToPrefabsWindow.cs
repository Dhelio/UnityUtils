using Castrimaris.Core.Extensions;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace Castrimaris.Core.Editor.Windows {

    /// <summary>
    /// TODO this has been generated by ChatGPT and destroys all the scene's materials. Needs fixing.
    /// </summary>
    public class MeshesToPrefabsWindow : EditorWindow {
        [MenuItem("Tools/Castrimaris/Windows/Mesh To Prefab Converter")]
        public static void ShowWindow() {
            GetWindow<MeshesToPrefabsWindow>("Mesh To Prefab Converter");
        }

        private void OnGUI() {
            if (GUILayout.Button("Convert Meshes to Prefabs")) {
                ConvertMeshesToPrefabs();
            }
        }

        private void ConvertMeshesToPrefabs() {
            Dictionary<Mesh, GameObject> meshPrefabMap = new Dictionary<Mesh, GameObject>();

            // Find all mesh filter components in the scene
            MeshFilter[] meshFilters = FindObjectsOfType<MeshFilter>();

            foreach (MeshFilter meshFilter in meshFilters) {
                Mesh mesh = meshFilter.sharedMesh;

                if (mesh != null) {
                    if (!meshPrefabMap.ContainsKey(mesh)) {
                        // Create a new prefab for this unique mesh
                        GameObject newPrefab = CreatePrefabForMesh(mesh);
                        meshPrefabMap[mesh] = newPrefab;
                    }

                    // Replace the mesh instance with the prefab instance
                    ReplaceWithPrefab(meshFilter.gameObject, meshPrefabMap[mesh]);
                }
            }

            Debug.Log("Conversion complete!");
        }

        private GameObject CreatePrefabForMesh(Mesh mesh) {
            // Create a new GameObject with a MeshFilter and MeshRenderer
            GameObject meshObject = new GameObject(mesh.name);
            MeshFilter mf = meshObject.AddComponent<MeshFilter>();
            MeshRenderer mr = meshObject.AddComponent<MeshRenderer>();
            mf.sharedMesh = mesh;

            // Copy material from original mesh if available
            Renderer originalRenderer = meshObject.GetComponent<Renderer>();
            if (originalRenderer != null) {
                mr.sharedMaterial = originalRenderer.sharedMaterial;
            }

            string n = mesh.name;
            if (n.IsNullOrEmpty()) {
                n = GUID.Generate().ToString();
            }

            // Save the GameObject as a prefab in the Assets folder
            string prefabPath = "Assets/Prefabs/" + n + ".prefab";
            GameObject prefab = PrefabUtility.SaveAsPrefabAsset(meshObject, prefabPath);

            // Destroy the temporary GameObject
            DestroyImmediate(meshObject);

            return prefab;
        }

        private void ReplaceWithPrefab(GameObject original, GameObject prefab) {
            // Record the original GameObject's transform
            Transform originalTransform = original.transform;

            // Instantiate the prefab
            GameObject prefabInstance = (GameObject)PrefabUtility.InstantiatePrefab(prefab);

            // Copy the transform values to the prefab instance
            prefabInstance.transform.position = originalTransform.position;
            prefabInstance.transform.rotation = originalTransform.rotation;
            prefabInstance.transform.localScale = originalTransform.localScale;

            // Replace the original GameObject with the prefab instance in the hierarchy
            Undo.RegisterCompleteObjectUndo(original, "Replace with Prefab");
            DestroyImmediate(original);
            Undo.RegisterCreatedObjectUndo(prefabInstance, "Replace with Prefab");
        }
    }

}

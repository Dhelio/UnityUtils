//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/InputActions/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

namespace Castrimaris.InputActions
{
    public partial class @PlayerActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Mobile"",
            ""id"": ""bc5552c7-b6f6-4626-8c69-914122399992"",
            ""actions"": [
                {
                    ""name"": ""PrimaryTouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fb357f4a-87d1-4892-8093-ac93296309a5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""493cd3b4-c341-482d-95ee-15bf41621c9a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""b6f70cca-b6c3-4cc5-b8b5-eb25763d3e89"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d8c26323-1a36-4d7b-a6ed-e6cd192c7d3c"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9204d6b-c55f-4381-ac05-c9c6c0f982a2"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db740442-fca5-4c04-b9a1-6d3749d0a4d3"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PC"",
            ""id"": ""aeab5d53-0a3a-4146-9adb-dc3221142ed0"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""280ddf38-81e8-43c5-b3fe-453a8084a2a5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Direction"",
                    ""type"": ""Value"",
                    ""id"": ""f2940bdf-1c25-48dd-91de-a447d70bee73"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""099ade2d-019b-4498-8241-cac29eb45548"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""16e9ebd9-e7e8-42ec-9fb9-0898fb8ab671"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""12b90ad8-e665-4075-8a07-104659eae241"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLock"",
                    ""type"": ""Button"",
                    ""id"": ""cc441b73-12df-4c57-87ec-acf0b74216ee"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""2455ca9d-40a4-46c8-b7e6-1e5cfed26c58"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""b3306b9e-e198-4964-8dd1-b714f6d1f07d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6e14fd58-0a8f-43d0-aa5c-a42c36a242eb"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f97f0115-1a5c-44e2-9803-d3efbd405c79"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c3fa93c-daf9-458e-8daa-dd7096a0ed63"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""77bcc3f5-760b-418a-b4fb-b7d240770d3b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d65caeb9-6039-4ce8-8218-587a152f1c1e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""227a38d3-0e68-40a4-ad36-6effc378081c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""422785c7-773f-4af8-93f7-ad500f12f6c1"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""88079c25-4ea1-4b42-9e7e-3a3d19437170"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4ab6b364-9c5e-4358-b585-28ab9540dbdd"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7ae76901-fcc1-42ed-9d1b-0a60ed1f1004"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0be61256-09e6-4830-8a5c-ea60c2b25fe9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""27073a4b-da8d-476f-a089-fa41b12a5733"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""75a333d7-7f11-4012-96f6-94e4d54374af"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b647d88-8a82-44fd-85e8-68614d3087e4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""565919f2-c5c1-4101-aecc-d76107a09e6f"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21e3af13-d958-4ec2-99c9-e55e6358f349"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Mobile
            m_Mobile = asset.FindActionMap("Mobile", throwIfNotFound: true);
            m_Mobile_PrimaryTouch = m_Mobile.FindAction("PrimaryTouch", throwIfNotFound: true);
            m_Mobile_TouchPosition = m_Mobile.FindAction("TouchPosition", throwIfNotFound: true);
            m_Mobile_Teleport = m_Mobile.FindAction("Teleport", throwIfNotFound: true);
            // PC
            m_PC = asset.FindActionMap("PC", throwIfNotFound: true);
            m_PC_Movement = m_PC.FindAction("Movement", throwIfNotFound: true);
            m_PC_Direction = m_PC.FindAction("Direction", throwIfNotFound: true);
            m_PC_Exit = m_PC.FindAction("Exit", throwIfNotFound: true);
            m_PC_Click = m_PC.FindAction("Click", throwIfNotFound: true);
            m_PC_Sprint = m_PC.FindAction("Sprint", throwIfNotFound: true);
            m_PC_MouseLock = m_PC.FindAction("MouseLock", throwIfNotFound: true);
            m_PC_Teleport = m_PC.FindAction("Teleport", throwIfNotFound: true);
            m_PC_Drop = m_PC.FindAction("Drop", throwIfNotFound: true);
        }

        ~@PlayerActions()
        {
            Debug.Assert(!m_Mobile.enabled, "This will cause a leak and performance issues, PlayerActions.Mobile.Disable() has not been called.");
            Debug.Assert(!m_PC.enabled, "This will cause a leak and performance issues, PlayerActions.PC.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Mobile
        private readonly InputActionMap m_Mobile;
        private List<IMobileActions> m_MobileActionsCallbackInterfaces = new List<IMobileActions>();
        private readonly InputAction m_Mobile_PrimaryTouch;
        private readonly InputAction m_Mobile_TouchPosition;
        private readonly InputAction m_Mobile_Teleport;
        public struct MobileActions
        {
            private @PlayerActions m_Wrapper;
            public MobileActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryTouch => m_Wrapper.m_Mobile_PrimaryTouch;
            public InputAction @TouchPosition => m_Wrapper.m_Mobile_TouchPosition;
            public InputAction @Teleport => m_Wrapper.m_Mobile_Teleport;
            public InputActionMap Get() { return m_Wrapper.m_Mobile; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MobileActions set) { return set.Get(); }
            public void AddCallbacks(IMobileActions instance)
            {
                if (instance == null || m_Wrapper.m_MobileActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MobileActionsCallbackInterfaces.Add(instance);
                @PrimaryTouch.started += instance.OnPrimaryTouch;
                @PrimaryTouch.performed += instance.OnPrimaryTouch;
                @PrimaryTouch.canceled += instance.OnPrimaryTouch;
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @Teleport.started += instance.OnTeleport;
                @Teleport.performed += instance.OnTeleport;
                @Teleport.canceled += instance.OnTeleport;
            }

            private void UnregisterCallbacks(IMobileActions instance)
            {
                @PrimaryTouch.started -= instance.OnPrimaryTouch;
                @PrimaryTouch.performed -= instance.OnPrimaryTouch;
                @PrimaryTouch.canceled -= instance.OnPrimaryTouch;
                @TouchPosition.started -= instance.OnTouchPosition;
                @TouchPosition.performed -= instance.OnTouchPosition;
                @TouchPosition.canceled -= instance.OnTouchPosition;
                @Teleport.started -= instance.OnTeleport;
                @Teleport.performed -= instance.OnTeleport;
                @Teleport.canceled -= instance.OnTeleport;
            }

            public void RemoveCallbacks(IMobileActions instance)
            {
                if (m_Wrapper.m_MobileActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMobileActions instance)
            {
                foreach (var item in m_Wrapper.m_MobileActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MobileActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MobileActions @Mobile => new MobileActions(this);

        // PC
        private readonly InputActionMap m_PC;
        private List<IPCActions> m_PCActionsCallbackInterfaces = new List<IPCActions>();
        private readonly InputAction m_PC_Movement;
        private readonly InputAction m_PC_Direction;
        private readonly InputAction m_PC_Exit;
        private readonly InputAction m_PC_Click;
        private readonly InputAction m_PC_Sprint;
        private readonly InputAction m_PC_MouseLock;
        private readonly InputAction m_PC_Teleport;
        private readonly InputAction m_PC_Drop;
        public struct PCActions
        {
            private @PlayerActions m_Wrapper;
            public PCActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PC_Movement;
            public InputAction @Direction => m_Wrapper.m_PC_Direction;
            public InputAction @Exit => m_Wrapper.m_PC_Exit;
            public InputAction @Click => m_Wrapper.m_PC_Click;
            public InputAction @Sprint => m_Wrapper.m_PC_Sprint;
            public InputAction @MouseLock => m_Wrapper.m_PC_MouseLock;
            public InputAction @Teleport => m_Wrapper.m_PC_Teleport;
            public InputAction @Drop => m_Wrapper.m_PC_Drop;
            public InputActionMap Get() { return m_Wrapper.m_PC; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PCActions set) { return set.Get(); }
            public void AddCallbacks(IPCActions instance)
            {
                if (instance == null || m_Wrapper.m_PCActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PCActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Direction.started += instance.OnDirection;
                @Direction.performed += instance.OnDirection;
                @Direction.canceled += instance.OnDirection;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @MouseLock.started += instance.OnMouseLock;
                @MouseLock.performed += instance.OnMouseLock;
                @MouseLock.canceled += instance.OnMouseLock;
                @Teleport.started += instance.OnTeleport;
                @Teleport.performed += instance.OnTeleport;
                @Teleport.canceled += instance.OnTeleport;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
            }

            private void UnregisterCallbacks(IPCActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Direction.started -= instance.OnDirection;
                @Direction.performed -= instance.OnDirection;
                @Direction.canceled -= instance.OnDirection;
                @Exit.started -= instance.OnExit;
                @Exit.performed -= instance.OnExit;
                @Exit.canceled -= instance.OnExit;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @Sprint.started -= instance.OnSprint;
                @Sprint.performed -= instance.OnSprint;
                @Sprint.canceled -= instance.OnSprint;
                @MouseLock.started -= instance.OnMouseLock;
                @MouseLock.performed -= instance.OnMouseLock;
                @MouseLock.canceled -= instance.OnMouseLock;
                @Teleport.started -= instance.OnTeleport;
                @Teleport.performed -= instance.OnTeleport;
                @Teleport.canceled -= instance.OnTeleport;
                @Drop.started -= instance.OnDrop;
                @Drop.performed -= instance.OnDrop;
                @Drop.canceled -= instance.OnDrop;
            }

            public void RemoveCallbacks(IPCActions instance)
            {
                if (m_Wrapper.m_PCActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPCActions instance)
            {
                foreach (var item in m_Wrapper.m_PCActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PCActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PCActions @PC => new PCActions(this);
        public interface IMobileActions
        {
            void OnPrimaryTouch(InputAction.CallbackContext context);
            void OnTouchPosition(InputAction.CallbackContext context);
            void OnTeleport(InputAction.CallbackContext context);
        }
        public interface IPCActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnDirection(InputAction.CallbackContext context);
            void OnExit(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
            void OnMouseLock(InputAction.CallbackContext context);
            void OnTeleport(InputAction.CallbackContext context);
            void OnDrop(InputAction.CallbackContext context);
        }
    }
}
